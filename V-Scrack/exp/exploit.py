#-*-coding:utf-8-*-

import os
import sys
import traceback

if not os.path.dirname(os.getcwd()) in sys.path:
    sys.path.append(os.path.dirname(os.getcwd()))

import time
import redis
import socket
import requests
from exp.payload.getfunc import func
from exp.lib.protocolparse import protocoparse
from exp.lib.httpparse import httpparse
import struct
import re
from exp.lib import gla
from exp.lib.auxiliarylib import Auxiliarylib
import _thread
import datetime
import threading

class exploit():
    def __init__(self):
        pass

    def exploitall(self,ip,port,protocol_name,service_name):
        hosts = ip+':'+str(port)
        port = str(port)
        t = protocoparse()
        (tag,protocol) = t.servicetest(ip, port, protocol_name, service_name)
        print(ip,port,protocol,tag)
        r = func()
        rres = []
        result = []
        rres = r.getresult(protocol,ip,port,tag)
        print(rres)
        for res in rres:
            if res[0] == True:
                print('The vul number is %s' %res[2],'************',res[3])
                res = list(res)
                if 'http://'in res[1]:
                    res[1] = res[1].strip('http://')
                    print(res[1])
                elif 'https://'in res[1]:
                    res[1] = res[1].strip('https://')
                result.append(res)
        if len(result) == 0:
            number = 'v0'
            result.append([False, hosts, number, 'No vulnerabilities found'])
        for r in result:
            r.insert(0,ip)
        return result
def sh():
    dns = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    dns.bind(('0.0.0.0',53))
    au = Auxiliarylib()
    print('Auxiliary script will start....')
    _thread.start_new_thread(au.auxiliarytest,())
    print('Auxiliary script have been started....')
    while True:
        try:
            time.sleep(1)
            recv,addr = dns.recvfrom(1024)
            if recv not in gla.query_history:gla.query_history.append(recv)
            print(datetime.datetime.now().strftime('%m-%d %H:%M:%S') + " " +str(addr[0]) +' Dns Query: ' + recv)
        except Exception as e:
            print(e)
            continue

if __name__ == '__main__':
    #ip = input("please input ip address:")
    #port = input("please input port:")
    ip = sys.argv[1]
    port = sys.argv[2]
    protocol_name = sys.argv[3]
    service_name = sys.argv[4]
    e = exploit()
    threads = []
    t1 = threading.Thread(target=sh,args=())
    threads.append(t1)
    t2 = threading.Thread(target=e.exploitall,args=(ip,port,protocol_name,service_name))
    threads.append(t2)
    t1.setDaemon(True)
    for t in threads:
        t.start()

#if __name__ == '__main__':
    #ip = sys.argv[1]
    #port = sys.argv[2]
    #protocol = sys.argv[3]
    #ips=[('10.30.14.21','80','http'),('10.30.14.21','443','https')]
    #ips=[('10.42.187.156','443','https')]
    #for ip,port,protocol in ips:
        #ts = time()
        #e = exploit()
        #result = e.exploitall(ip,port,protocol)
        #print('Scan result {}'.format(result))
        #print('cost time {}s'.format(time() - ts))





